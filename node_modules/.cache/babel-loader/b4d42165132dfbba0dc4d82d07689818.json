{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sagaMiddlewareFactory;\n\nvar _utils = require('./utils');\n\nvar _proc = require('./proc');\n\nvar _proc2 = _interopRequireDefault(_proc);\n\nvar _channel = require('./channel');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction sagaMiddlewareFactory() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var runSagaDynamically = void 0;\n  var sagaMonitor = options.sagaMonitor; // monitors are expected to have a certain interface, let's fill-in any missing ones\n\n  if (sagaMonitor) {\n    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || _utils.noop;\n    sagaMonitor.effectResolved = sagaMonitor.effectResolved || _utils.noop;\n    sagaMonitor.effectRejected = sagaMonitor.effectRejected || _utils.noop;\n    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || _utils.noop;\n    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || _utils.noop;\n  }\n\n  if (_utils.is.func(options)) {\n    if (process.env.NODE_ENV === 'production') {\n      throw new Error('Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead');\n    } else {\n      throw new Error('You passed a function to the Saga middleware. You are likely trying to start a        Saga by directly passing it to the middleware. This is no longer possible starting from 0.10.0.        To run a Saga, you must do it dynamically AFTER mounting the middleware into the store.\\n        Example:\\n          import createSagaMiddleware from \\'redux-saga\\'\\n          ... other imports\\n\\n          const sagaMiddleware = createSagaMiddleware()\\n          const store = createStore(reducer, applyMiddleware(sagaMiddleware))\\n          sagaMiddleware.run(saga, ...args)\\n      ');\n    }\n  }\n\n  if (options.logger && !_utils.is.func(options.logger)) {\n    throw new Error('`options.logger` passed to the Saga middleware is not a function!');\n  }\n\n  if (options.onerror) {\n    if (_utils.isDev) (0, _utils.log)('warn', '`options.onerror` is deprecated. Use `options.onError` instead.');\n    options.onError = options.onerror;\n    delete options.onerror;\n  }\n\n  if (options.onError && !_utils.is.func(options.onError)) {\n    throw new Error('`options.onError` passed to the Saga middleware is not a function!');\n  }\n\n  if (options.emitter && !_utils.is.func(options.emitter)) {\n    throw new Error('`options.emitter` passed to the Saga middleware is not a function!');\n  }\n\n  function sagaMiddleware(_ref) {\n    var getState = _ref.getState,\n        dispatch = _ref.dispatch;\n    runSagaDynamically = runSaga;\n    var sagaEmitter = (0, _channel.emitter)();\n    sagaEmitter.emit = (options.emitter || _utils.ident)(sagaEmitter.emit);\n    var sagaDispatch = (0, _utils.wrapSagaDispatch)(dispatch);\n\n    function runSaga(saga, args, sagaId) {\n      return (0, _proc2.default)(saga.apply(undefined, _toConsumableArray(args)), sagaEmitter.subscribe, sagaDispatch, getState, options, sagaId, saga.name);\n    }\n\n    return function (next) {\n      return function (action) {\n        if (sagaMonitor) {\n          sagaMonitor.actionDispatched(action);\n        }\n\n        var result = next(action); // hit reducers\n\n        sagaEmitter.emit(action);\n        return result;\n      };\n    };\n  }\n\n  sagaMiddleware.run = function (saga) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (0, _utils.check)(runSagaDynamically, _utils.is.notUndef, 'Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware');\n    (0, _utils.check)(saga, _utils.is.func, 'sagaMiddleware.run(saga, ...args): saga argument must be a Generator function!');\n    var effectId = (0, _utils.uid)();\n\n    if (sagaMonitor) {\n      sagaMonitor.effectTriggered({\n        effectId: effectId,\n        root: true,\n        parentEffectId: 0,\n        effect: {\n          root: true,\n          saga: saga,\n          args: args\n        }\n      });\n    }\n\n    var task = runSagaDynamically(saga, args, effectId);\n\n    if (sagaMonitor) {\n      sagaMonitor.effectResolved(effectId, task);\n    }\n\n    return task;\n  };\n\n  return sagaMiddleware;\n}","map":{"version":3,"sources":["C:/Users/Yuvarani/Desktop/shielder web/node_modules/redux-saga/lib/internal/middleware.js"],"names":["Object","defineProperty","exports","value","default","sagaMiddlewareFactory","_utils","require","_proc","_proc2","_interopRequireDefault","_channel","obj","__esModule","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","options","arguments","undefined","runSagaDynamically","sagaMonitor","effectTriggered","noop","effectResolved","effectRejected","effectCancelled","actionDispatched","is","func","process","env","NODE_ENV","Error","logger","onerror","isDev","log","onError","emitter","sagaMiddleware","_ref","getState","dispatch","runSaga","sagaEmitter","emit","ident","sagaDispatch","wrapSagaDispatch","saga","args","sagaId","apply","subscribe","name","next","action","result","run","_len","_key","check","notUndef","effectId","uid","root","parentEffectId","effect","task"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = sagaMiddlewareFactory;\n\nvar _utils = require('./utils');\n\nvar _proc = require('./proc');\n\nvar _proc2 = _interopRequireDefault(_proc);\n\nvar _channel = require('./channel');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction sagaMiddlewareFactory() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var runSagaDynamically = void 0;\n  var sagaMonitor = options.sagaMonitor;\n\n  // monitors are expected to have a certain interface, let's fill-in any missing ones\n\n  if (sagaMonitor) {\n    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || _utils.noop;\n    sagaMonitor.effectResolved = sagaMonitor.effectResolved || _utils.noop;\n    sagaMonitor.effectRejected = sagaMonitor.effectRejected || _utils.noop;\n    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || _utils.noop;\n    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || _utils.noop;\n  }\n\n  if (_utils.is.func(options)) {\n    if (process.env.NODE_ENV === 'production') {\n      throw new Error('Saga middleware no longer accept Generator functions. Use sagaMiddleware.run instead');\n    } else {\n      throw new Error('You passed a function to the Saga middleware. You are likely trying to start a        Saga by directly passing it to the middleware. This is no longer possible starting from 0.10.0.        To run a Saga, you must do it dynamically AFTER mounting the middleware into the store.\\n        Example:\\n          import createSagaMiddleware from \\'redux-saga\\'\\n          ... other imports\\n\\n          const sagaMiddleware = createSagaMiddleware()\\n          const store = createStore(reducer, applyMiddleware(sagaMiddleware))\\n          sagaMiddleware.run(saga, ...args)\\n      ');\n    }\n  }\n\n  if (options.logger && !_utils.is.func(options.logger)) {\n    throw new Error('`options.logger` passed to the Saga middleware is not a function!');\n  }\n\n  if (options.onerror) {\n    if (_utils.isDev) (0, _utils.log)('warn', '`options.onerror` is deprecated. Use `options.onError` instead.');\n    options.onError = options.onerror;\n    delete options.onerror;\n  }\n\n  if (options.onError && !_utils.is.func(options.onError)) {\n    throw new Error('`options.onError` passed to the Saga middleware is not a function!');\n  }\n\n  if (options.emitter && !_utils.is.func(options.emitter)) {\n    throw new Error('`options.emitter` passed to the Saga middleware is not a function!');\n  }\n\n  function sagaMiddleware(_ref) {\n    var getState = _ref.getState,\n        dispatch = _ref.dispatch;\n\n    runSagaDynamically = runSaga;\n    var sagaEmitter = (0, _channel.emitter)();\n    sagaEmitter.emit = (options.emitter || _utils.ident)(sagaEmitter.emit);\n    var sagaDispatch = (0, _utils.wrapSagaDispatch)(dispatch);\n\n    function runSaga(saga, args, sagaId) {\n      return (0, _proc2.default)(saga.apply(undefined, _toConsumableArray(args)), sagaEmitter.subscribe, sagaDispatch, getState, options, sagaId, saga.name);\n    }\n\n    return function (next) {\n      return function (action) {\n        if (sagaMonitor) {\n          sagaMonitor.actionDispatched(action);\n        }\n        var result = next(action); // hit reducers\n        sagaEmitter.emit(action);\n        return result;\n      };\n    };\n  }\n\n  sagaMiddleware.run = function (saga) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (0, _utils.check)(runSagaDynamically, _utils.is.notUndef, 'Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware');\n    (0, _utils.check)(saga, _utils.is.func, 'sagaMiddleware.run(saga, ...args): saga argument must be a Generator function!');\n\n    var effectId = (0, _utils.uid)();\n    if (sagaMonitor) {\n      sagaMonitor.effectTriggered({ effectId: effectId, root: true, parentEffectId: 0, effect: { root: true, saga: saga, args: args } });\n    }\n    var task = runSagaDynamically(saga, args, effectId);\n    if (sagaMonitor) {\n      sagaMonitor.effectResolved(effectId, task);\n    }\n    return task;\n  };\n\n  return sagaMiddleware;\n}"]},"metadata":{},"sourceType":"script"}