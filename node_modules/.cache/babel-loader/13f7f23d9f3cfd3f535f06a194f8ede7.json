{"ast":null,"code":"export const emailValidator = email => {\n  const re = /\\S+@\\S+\\.\\S+/;\n  if (!email || email.length <= 0) return 'Email Id cannot be empty.';\n  if (!re.test(email)) return 'Ooops! We need a valid email address.';\n  return '';\n};\nexport const anotherEmailValidator = anotheremail => {\n  const re = /\\S+@\\S+\\.\\S+/;\n  if (!anotheremail || anotheremail.length <= 0) return 'Email Id cannot be empty.';\n  if (!re.test(anotheremail)) return 'Ooops! We need a valid email address.';\n  return '';\n};\nexport const passwordValidator = password => {\n  if (!password || password.length <= 0) return 'Password cannot be empty.';\n  return '';\n};\nexport const firstNameValidator = firstName => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!firstName || firstName.length <= 0) return ' firstName cannot be empty.';\n  if (!re.test(firstName)) return 'We need a valid name.';\n  return '';\n};\nexport const lastNameValidator = lastName => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!lastName || lastName.length <= 0) return ' lastName cannot be empty.';\n  if (!re.test(lastName)) return 'We need a valid name.';\n  return '';\n};\nexport const nameValidator = name => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!name || name.length <= 0) return ' Name cannot be empty.';\n  if (!re.test(name)) return 'We need a valid name.';\n  return '';\n};\nexport const userNameValidator = username => {\n  const re = /^[A-Za-z]+$/;\n  if (!username || username.length <= 0) return ' Name cannot be empty.';\n  if (!re.test(username)) return 'We need a valid name.';\n  return '';\n};\nexport const departmentValidator = department => {\n  if (!department || department.length <= 0 || department == 'Select') return 'department cannot be empty.';\n  return '';\n};\nexport const mobileCountryCodeValidator = mobileCountryCode => {\n  if (!mobileCountryCode || mobileCountryCode.length <= 0 || mobileCountryCode == 'Select') return 'mobileCode cannot be empty.';\n  return '';\n};\nexport const countryValidator = country => {\n  if (!country || country.length <= 0 || country == 'Select') return 'country cannot be empty.';\n  return '';\n};\nexport const cityValidator = city => {\n  if (!city || city.length <= 0 || city == 'Select') return 'city cannot be empty.';\n  return '';\n};\nexport const addressValidator = address => {\n  if (!address || address.length <= 0) return 'Address cannot be empty.';\n  return '';\n};\nexport const companyValidator = company => {\n  if (!company || company.length <= 0) return 'company cannot be empty.';\n  return '';\n};\nexport const mobileValidator = mobile => {\n  const re = /^[0-9]+$/;\n  if (!re.test(mobile)) return 'We need a valid mobileNumber.';\n  if (!mobile || mobile.length <= 0) return 'Mobile Number cannot be empty.';\n  if (!mobile || mobile.length < 10) return 'Your number is not valid.';\n  if (!mobile || mobile.length > 15) return 'Your number exceeds.';\n  return '';\n};\nexport const mobileValidator2 = mobile2 => {\n  const re = /^[0-9]+$/;\n  if (!re.test(mobile2)) return 'We need a valid mobileNumber.';\n  if (!mobile2 || mobile2.length <= 0) return 'Mobile Number cannot be empty.';\n  if (!mobile2 || mobile2.length < 10) return 'Your number is not valid.';\n  if (!mobile2 || mobile2.length > 15) return 'Your number exceeds.';\n  return '';\n};\nexport const landlineValidator = landLine => {\n  const la = /^[0-9]+$/;\n  if (!landLine || landLine.length <= 0) return 'landline Number cannot be empty.';\n  return '';\n};\nexport const otpValidator = otp => {\n  if (!otp || otp.length <= 0) return 'OTP cannot be empty.';\n  return '';\n};\nexport const newPasswordValidator = newPassword => {\n  if (!newPassword || newPassword.length <= 0) return 'New Password cannot be empty.';\n  return '';\n};\nexport const confirmPasswordValidator = confirmPassword => {\n  if (!confirmPassword || confirmPassword.length <= 0) return 'Confirm Password cannot be empty.';\n  return '';\n};\nexport const genderValidator = gender => {\n  if (!gender || gender.length <= 0) return 'Please Select the Gender.';\n  return '';\n};\nexport const dateValidator = date => {\n  if (!date || date.length <= 0) return 'Please select your Date of Birth.';\n  return '';\n};\nexport const reasonValidator = reason => {\n  const re = /^[A-Za-z]+$/;\n  if (!reason || reason.length <= 0) return 'Reason cannot be empty.';\n  if (!re.test(reason)) return 'Please Enter the Valid Reason .';\n  return '';\n};\nexport const stateValidator = state => {\n  if (!state || state.length <= 0) return 'State cannot be empty.';\n  return '';\n};\nexport const planValidator = plan => {\n  if (!plan || plan.length <= 0) return 'Please select atleast one plan.';\n  return '';\n};\nexport const pincodeValidator = pincode => {\n  if (!pincode || pincode.length <= 0) return 'Pin Code cannot be empty.';\n  return '';\n};\nexport const registeridValidation = registerid => {\n  const re = /^[0-9]+$/;\n  if (!re.test(registerid)) return 'only Number .';\n  return '';\n};\nexport const gsaNumberValidation = gsanumber => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!gsanumber || gsanumber.length <= 0) return ' GSA Number cannot be empty.'; // if (!re.test(gsanumber)) return 'We need a valid name.';\n\n  return '';\n};\nexport const employeecountValidation = employeecount => {\n  const re = /^[0-9]+$/;\n  if (!re.test(employeecount)) return 'only Number .';\n  return '';\n};","map":{"version":3,"sources":["F:/Projects/shielder web/src/Core/utils.js"],"names":["emailValidator","email","re","length","test","anotherEmailValidator","anotheremail","passwordValidator","password","firstNameValidator","firstName","lastNameValidator","lastName","nameValidator","name","userNameValidator","username","departmentValidator","department","mobileCountryCodeValidator","mobileCountryCode","countryValidator","country","cityValidator","city","addressValidator","address","companyValidator","company","mobileValidator","mobile","mobileValidator2","mobile2","landlineValidator","landLine","la","otpValidator","otp","newPasswordValidator","newPassword","confirmPasswordValidator","confirmPassword","genderValidator","gender","dateValidator","date","reasonValidator","reason","stateValidator","state","planValidator","plan","pincodeValidator","pincode","registeridValidation","registerid","gsaNumberValidation","gsanumber","employeecountValidation","employeecount"],"mappings":"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","sourcesContent":["\nexport const emailValidator = email => {\n  const re = /\\S+@\\S+\\.\\S+/;\n \n  if (!email || email.length <= 0) return 'Email Id cannot be empty.';\n  if (!re.test(email)) return 'Ooops! We need a valid email address.';\n  return '';\n};\n\nexport const anotherEmailValidator = anotheremail => {\n  const re = /\\S+@\\S+\\.\\S+/;\n \n  if (!anotheremail || anotheremail.length <= 0) return 'Email Id cannot be empty.';\n  if (!re.test(anotheremail)) return 'Ooops! We need a valid email address.';\n  return '';\n};\nexport const passwordValidator = password => {\n  if (!password || password.length <= 0) return 'Password cannot be empty.';\n  return '';\n};\n\nexport const firstNameValidator = firstName => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!firstName || firstName.length <= 0) return ' firstName cannot be empty.';\n  if (!re.test(firstName)) return 'We need a valid name.';\n  return '';\n};\nexport const lastNameValidator = lastName => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!lastName || lastName.length <= 0) return ' lastName cannot be empty.';\n  if (!re.test(lastName)) return 'We need a valid name.';\n  return '';\n};\n\nexport const nameValidator = name => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!name || name.length <= 0) return ' Name cannot be empty.';\n  if (!re.test(name)) return 'We need a valid name.';\n  return '';\n};\n\nexport const userNameValidator = username => {\n  const re = /^[A-Za-z]+$/;\n  if (!username || username.length <= 0) return ' Name cannot be empty.';\n  if (!re.test(username)) return 'We need a valid name.';\n  return '';\n};\nexport const departmentValidator = department => {\n  if (!department || department.length <= 0 || department== 'Select' ) return 'department cannot be empty.';\n  return '';\n};\nexport const mobileCountryCodeValidator = mobileCountryCode => {\n  if (!mobileCountryCode || mobileCountryCode.length <= 0 || mobileCountryCode== 'Select' ) return 'mobileCode cannot be empty.';\n  return '';\n};\nexport const countryValidator = country => {\n  if (!country || country.length <= 0 || country== 'Select' ) return 'country cannot be empty.';\n  return '';\n};\nexport const cityValidator = city => {\n  if (!city || city.length <= 0 || city== 'Select' ) return 'city cannot be empty.';\n  return '';\n};\n\nexport const addressValidator = address => {\n  if (!address || address.length <= 0) return 'Address cannot be empty.';\n  return '';\n};\n\nexport const companyValidator = company => {\n  if (!company || company.length <= 0) return 'company cannot be empty.';\n  return '';\n};\n\n\nexport const mobileValidator = mobile => {\n  const re = /^[0-9]+$/;\n  if (!re.test(mobile)) return 'We need a valid mobileNumber.';\n\n  if (!mobile || mobile.length <= 0) return 'Mobile Number cannot be empty.';\n  if (!mobile || mobile.length < 10) return 'Your number is not valid.';\n  if (!mobile || mobile.length >15) return 'Your number exceeds.';\n\n\n  return '';\n};\nexport const mobileValidator2 = mobile2 => {\n  const re = /^[0-9]+$/;\n  if (!re.test(mobile2)) return 'We need a valid mobileNumber.';\n\n  if (!mobile2 || mobile2.length <= 0) return 'Mobile Number cannot be empty.';\n  if (!mobile2 || mobile2.length < 10) return 'Your number is not valid.';\n  if (!mobile2 || mobile2.length >15) return 'Your number exceeds.';\n\n\n  return '';\n};\n\nexport const landlineValidator = landLine => {\n  const la = /^[0-9]+$/;\n\n  if (!landLine || landLine.length <= 0) return 'landline Number cannot be empty.';\n\n\n  return '';\n};\nexport const otpValidator = otp => {\n  if (!otp || otp.length <= 0) return 'OTP cannot be empty.';\n  return '';\n};\n\nexport const newPasswordValidator = newPassword => {\n  if (!newPassword || newPassword.length <= 0) return 'New Password cannot be empty.';\n  return '';\n};\n\nexport const confirmPasswordValidator = confirmPassword => {\n  if (!confirmPassword || confirmPassword.length <= 0) return 'Confirm Password cannot be empty.';\n  return '';\n};\n\nexport const genderValidator = gender => {\n  if (!gender || gender.length <= 0) return 'Please Select the Gender.';\n  return '';\n};\n\nexport const dateValidator = date => {\n  if (!date || date.length <= 0) return 'Please select your Date of Birth.';\n  return '';\n};\n\n\n\nexport const reasonValidator = reason => {\n  const re = /^[A-Za-z]+$/;\n  if (!reason || reason.length <= 0) return 'Reason cannot be empty.';\n  if (!re.test(reason)) return 'Please Enter the Valid Reason .';\n  return '';\n};\n\n\n\n\n\nexport const stateValidator = state => {\n  if (!state || state.length <= 0) return 'State cannot be empty.';\n  return '';\n};\n\nexport const planValidator = plan => {\n  if (!plan || plan.length <= 0) return 'Please select atleast one plan.';\n  return '';\n};\n\n\n\nexport const pincodeValidator = pincode => {\n  if (!pincode || pincode.length <= 0) return 'Pin Code cannot be empty.';\n  return '';\n};\n\nexport const registeridValidation = registerid => {\n  const re = /^[0-9]+$/;\n  if (!re.test(registerid)) return 'only Number .';\n  return '';\n};\nexport const gsaNumberValidation = gsanumber => {\n  const re = /^[A-Za-z_ ]+$/;\n  if (!gsanumber || gsanumber.length <= 0) return ' GSA Number cannot be empty.';\n  // if (!re.test(gsanumber)) return 'We need a valid name.';\n  return '';\n};\nexport const employeecountValidation = employeecount => {\n  const re = /^[0-9]+$/;\n  if (!re.test(employeecount)) return 'only Number .';\n  return '';\n};"]},"metadata":{},"sourceType":"module"}